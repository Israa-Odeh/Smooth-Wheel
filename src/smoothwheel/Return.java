/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smoothwheel;

import javax.swing.JFrame;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ALFALAK
 */
public class Return extends javax.swing.JFrame {

    ReturnTable rettu;

    /**
     * Creates new form lastone
     */
    public Return() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        rettu = new ReturnTable();
        customeres();
        cars();
        updateCarTable();
    }

    public Return getCurrentInterface() {
        return this;
    }

    private void callTimer(JFrame notification) {
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                notification.setVisible(false);
            }
        }, 6000);
    }

    public void fineee(String carID) {
        this.fine.setText(carID);
    }

    public void eh(String M) {
        this.elapsed_hour.setText(M);
    }

    public void cr(String model) {
        this.carList.setSelectedItem(model);
    }

    public void cur(String color) {
        this.customerList.setSelectedItem(color);
    }

    private void updateCarTable() {
        try {
            Connection connection = e();
            Statement newStatement = connection.createStatement();
            String query = "Select * from RETURNS_A";
            ResultSet result = newStatement.executeQuery(query);
            DefaultTableModel rentalsTableModel = (DefaultTableModel) rettu.getTableName().getModel();
            rentalsTableModel.setRowCount(0);
            while (result.next()) {
                Vector rentalsVector = new Vector();
                rentalsVector.add(result.getString("Customer_ID"));
                rentalsVector.add(result.getString("Car_ID"));
                rentalsVector.add(result.getString("ELAPSED_HOURS"));
                rentalsVector.add(result.getString("DELAY_FEE"));
                rentalsTableModel.addRow(rentalsVector);
            }
        } catch (SQLException ex) {
            /*  ErrorNotification error = new ErrorNotification();
            error.setVisible(true);
            error.setText(ex.toString());
            callTimer(error);*/
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        fine = new javax.swing.JTextField();
        elapsed_hour = new javax.swing.JTextField();
        customerList = new javax.swing.JComboBox<>();
        carList = new javax.swing.JComboBox<>();
        ReturnBack = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        show = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        close0 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jBtn_Close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(252, 252, 252));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.setBackground(new Color(255,255,255,0));
        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("Customer ID");
        jLabel17.setOpaque(true);
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 270, 36));

        jLabel18.setBackground(new Color(255,255,255,0));
        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("Elapsed Hour");
        jLabel18.setOpaque(true);
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 270, 36));

        jLabel21.setBackground(new Color(255,255,255,0));
        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel21.setText("Fine");
        jLabel21.setOpaque(true);
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 160, 270, 36));

        jLabel20.setBackground(new Color(255,255,255,0));
        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel20.setText("CAR ID");
        jLabel20.setOpaque(true);
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 30, 270, 36));

        fine.setEditable(false);
        fine.setBackground(new Color(255,255,255,0));
        fine.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        fine.setForeground(new java.awt.Color(255, 255, 255));
        fine.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fine.setToolTipText("dynamic filled");
        fine.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        fine.setOpaque(false);
        fine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fineActionPerformed(evt);
            }
        });
        jPanel1.add(fine, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 200, 270, 40));

        elapsed_hour.setBackground(new Color(255,255,255,0));
        elapsed_hour.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        elapsed_hour.setForeground(new java.awt.Color(255, 255, 255));
        elapsed_hour.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        elapsed_hour.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        elapsed_hour.setOpaque(false);
        elapsed_hour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elapsed_hourActionPerformed(evt);
            }
        });
        jPanel1.add(elapsed_hour, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 270, 36));

        customerList.setBackground(new java.awt.Color(204, 204, 255));
        customerList.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        customerList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        customerList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerListActionPerformed(evt);
            }
        });
        jPanel1.add(customerList, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 270, 36));

        carList.setBackground(new java.awt.Color(204, 204, 255));
        carList.setEditable(true);
        carList.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        carList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        carList.setOpaque(false);
        jPanel1.add(carList, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 270, 36));

        ReturnBack.setBackground(new java.awt.Color(169, 166, 166));
        ReturnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Return Back.png"))); // NOI18N
        ReturnBack.setFocusPainted(false);
        ReturnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnBackActionPerformed(evt);
            }
        });
        jPanel1.add(ReturnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 130, 80));

        delete.setBackground(new java.awt.Color(169, 166, 166));
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Delete.png"))); // NOI18N
        delete.setFocusPainted(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        jPanel1.add(delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 550, 130, 80));

        Edit.setBackground(new java.awt.Color(169, 166, 166));
        Edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Edit.png"))); // NOI18N
        Edit.setFocusPainted(false);
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });
        jPanel1.add(Edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 550, 130, 80));

        Add.setBackground(new java.awt.Color(169, 166, 166));
        Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Add.png"))); // NOI18N
        Add.setFocusPainted(false);
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        jPanel1.add(Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 550, 130, 80));

        show.setBackground(new java.awt.Color(169, 166, 166));
        show.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Tables.png"))); // NOI18N
        show.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showItemStateChanged(evt);
            }
        });
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });
        jPanel1.add(show, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 550, 130, 80));

        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("Segoe Script", 1, 16)); // NOI18N
        jButton1.setText("Check and Calculate");
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 250, 270, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MainImage.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -60, 1330, 750));

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1330, 710));

        close0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Close.png"))); // NOI18N
        close0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                close0MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                close0MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                close0MouseExited(evt);
            }
        });
        jPanel2.add(close0, new org.netbeans.lib.awtextra.AbsoluteConstraints(1440, 0, 40, 40));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Edwardian Script ITC", 1, 36)); // NOI18N
        jLabel2.setText("  Smooth Wheel  ");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 40));

        jBtn_Close.setBackground(new java.awt.Color(255, 255, 255));
        jBtn_Close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Close.png"))); // NOI18N
        jBtn_Close.setBorder(null);
        jBtn_Close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtn_CloseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBtn_CloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBtn_CloseMouseExited(evt);
            }
        });
        jPanel2.add(jBtn_Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 5, 40, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1330, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Connection e() {
        Connection connection = null;
        try {
            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
            String url, username, password;
            url = "jdbc:oracle:thin:@localhost:1521:xe";
            username = "c##IsraaOdeh";
            password = "IsraaOdeh5";
            connection = DriverManager.getConnection(url, username, password);
            connection.setAutoCommit(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
            //Logger.getLogger(Maintenance.class.getName()).log(Level.SEVERE, null, ex);
        }
        return connection;
    }

    public void customeres() {
        try {
            Connection con = e();

            PreparedStatement pst = con.prepareStatement("select * from customer");
            ResultSet rs = pst.executeQuery();
            customerList.removeAllItems();

            while (rs.next()) {
                customerList.addItem(rs.getString(1));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void cars() {
        try {
            Connection con = e();

            PreparedStatement pst = con.prepareStatement("select * from Rents_A");
            ResultSet rs = pst.executeQuery();
            carList.removeAllItems();

            while (rs.next()) {
                carList.addItem(rs.getString(2));
            }

        } catch (SQLException ex) {
            Logger.getLogger(Return.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void elapsed_hourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elapsed_hourActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_elapsed_hourActionPerformed

    private void fineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fineActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_fineActionPerformed

    private void ReturnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnBackActionPerformed
        new WelcomeInterface().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_ReturnBackActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed

        if (elapsed_hour.getText().equals("") && (fine.getText().equals(""))) {
            WarningNotification warning = new WarningNotification();
            warning.setVisible(true);
            warning.setText("<html>Please make sure to fill only Elapsed hour. </html>");
            callTimer(warning);
        } else {
            Connection connection = e();
            try {
                Statement newstatement = connection.createStatement();
                String sb = "select * from  RENTS_A  where   CUSTOMER_ID= '" + this.customerList.getSelectedItem() + "'and car_id = '" + this.carList.getSelectedItem() + "'";
                ResultSet rs = newstatement.executeQuery(sb);
                if (rs.next()) {
                    String sn = "delete from Rents_a where  CUSTOMER_ID =  '" + this.customerList.getSelectedItem() + "'and car_id = '" + this.carList.getSelectedItem() + "'";
                    ResultSet checkResult = newstatement.executeQuery(sn);
                    boolean found = checkResult.next();
                    if (found == true) {

                        SuccessNotification success0 = new SuccessNotification();
                        success0.setVisible(true);
                        success0.setText("<html> The returned car is successfully removed from Rents.</html>");
                        callTimer(success0);
                    }

                    String sqlString = "insert into RETURNS_A values( '" + this.customerList.getSelectedItem().toString() + "', '" + this.carList.getSelectedItem().toString() + "', '" + this.elapsed_hour.getText() + "', '" + this.fine.getText() + "' )";

                    newstatement.executeUpdate(sqlString);
                    connection.commit();

                    SuccessNotification success = new SuccessNotification();
                    success.setVisible(true);
                    success.setText("<html> The returned car is successfully added.</html>");
                    callTimer(success);
                    elapsed_hour.setText("");
                    fine.setText("");
                    connection.close();

                    updateCarTable();

                } else {
                    WarningNotification warning = new WarningNotification();
                    warning.setVisible(true);
                    warning.setText("<html>The customer you have chosen <br/> doesn't rented this car. </html>");
                    callTimer(warning);
                }
            } catch (java.sql.SQLIntegrityConstraintViolationException ex) {

                ErrorNotification failed = new ErrorNotification();
                failed.setVisible(true);
                failed.setText("<html> it was reutrned car. </html>");
                callTimer(failed);
            } catch (SQLException ex) {

                ErrorNotification error = new ErrorNotification();
                error.setVisible(true);
                error.setText("please make sure to enter valid information.");
                callTimer(error);

            }

        }

    }//GEN-LAST:event_AddActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        if (elapsed_hour.getText().equals("") && (fine.getText().equals(""))) {
            WarningNotification warning = new WarningNotification();
            warning.setVisible(true);
            warning.setText("<html>Please make sure to fill Elapsed hour only. </html>");
            callTimer(warning);
        } else {
            Connection connection = e();
            try {
                Statement newstatement = connection.createStatement();

                String sb = "select * from  RETURNS_A  where  CUSTOMER_ID= '" + this.customerList.getSelectedItem() + "'and car_id = '" + this.carList.getSelectedItem() + "'";
                ResultSet rs = newstatement.executeQuery(sb);
                if (rs.next()) {
                    Statement deleteStatement = connection.createStatement();
                    String delete = "delete from RETURNS_A where CUSTOMER_ID='" + this.customerList.getSelectedItem() + "'and car_id = '" + this.carList.getSelectedItem() + "'";
                    int isDeleted = deleteStatement.executeUpdate(delete);
                    if (isDeleted == 1) {
                        connection.commit();
                        elapsed_hour.setText("");
                        fine.setText("");
                        updateCarTable();
                        SuccessNotification success = new SuccessNotification();
                        success.setVisible(true);
                        success.setText("The returned car is successfully deleted.");
                        callTimer(success);
                    } else {
                        WarningNotification warning = new WarningNotification();
                        warning.setVisible(true);
                        warning.setText("<html> The Car isn't rented, <br/> you can't remove it.</html>");
                        callTimer(warning);
                    }

                    connection.close();
                } else {
                    WarningNotification warning = new WarningNotification();
                    warning.setVisible(true);
                    warning.setText("<html> The customer does not rent this car. </html>");
                    callTimer(warning);
                }
            } catch (SQLException ex) {
                /*
                Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                 */
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void close0MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_close0MouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_close0MouseClicked

    private void close0MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_close0MouseEntered
        // TODO add your handling code here:
        close0.setBackground(Color.red);
    }//GEN-LAST:event_close0MouseEntered

    private void close0MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_close0MouseExited
        // TODO add your handling code here:
        close0.setBackground(Color.white);
    }//GEN-LAST:event_close0MouseExited

    private void showItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            rettu.setVisible(true);
            ReturnBack.setEnabled(false);
            Add.setEnabled(false);
            Edit.setEnabled(false);
            delete.setEnabled(false);
            show.setBackground(Color.WHITE);
        } else {
            rettu.setVisible(false);
            ReturnBack.setEnabled(true);
            Add.setEnabled(true);
            Edit.setEnabled(true);
            delete.setEnabled(true);
            show.setBackground(Color.LIGHT_GRAY);
        }

    }//GEN-LAST:event_showItemStateChanged

    private void customerListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerListActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int total;
        int EH = Integer.parseInt(elapsed_hour.getText());
        if (EH >= 0 && EH <= 24) {
            total = EH * 10;
            //notification yes
            String total0 = Integer.toString(total);
            fine.setText(total0);
        } else {
            WarningNotification warning = new WarningNotification();
            warning.setVisible(true);
            warning.setText("<html> Please make sure the the hours <br/> are in range of 1-24 only. </html>");
            callTimer(warning);
        }
        total = 0;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        if (elapsed_hour.getText().equals("") && (fine.getText().equals(""))) {
            WarningNotification warning = new WarningNotification();
            warning.setVisible(true);
            warning.setText("<html>Please make sure to fill Elapsed hour only. </html>");
            callTimer(warning);
        } else {
            Connection connection = e();

            try {

                String EHH = elapsed_hour.getText().toString();
                String FINNE = fine.getText().toString();
                Statement newstatement = connection.createStatement();

                String sb = "select * from  RETURNS_A  where  CUSTOMER_ID= '" + this.customerList.getSelectedItem() + "'and car_id = '" + this.carList.getSelectedItem() + "'";
                ResultSet rs = newstatement.executeQuery(sb);
                if (rs.next()) {

                    PreparedStatement updateStatement = connection.prepareStatement("Update  RETURNS_A  set  ELAPSED_HOURS = ?, DELAY_FEE = ? where   CUSTOMER_ID= '" + this.customerList.getSelectedItem() + "'and car_id = '" + this.carList.getSelectedItem() + "'");

                    updateStatement.setString(1, EHH);
                    updateStatement.setString(2, FINNE);

                    updateStatement.executeQuery();

                    connection.commit();

                    elapsed_hour.setText("");
                    fine.setText("");

                    SuccessNotification success = new SuccessNotification();
                    success.setVisible(true);
                    success.setText("<html> The information of the returned car <br/> is successfully updated. </html>");
                    callTimer(success);

                    updateCarTable();

                    connection.close();
                } else {
                    WarningNotification warning = new WarningNotification();
                    warning.setVisible(true);
                    warning.setText("<html>Please make sure that the customer <br/> has rented this car before. </html>");
                    callTimer(warning);
                }
            } catch (SQLException ex) {
                ErrorNotification error = new ErrorNotification();
                error.setVisible(true);
                error.setText("please make sure to enter valid information");
                callTimer(error);
            }
        }
    }//GEN-LAST:event_EditActionPerformed

    private void jBtn_CloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtn_CloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jBtn_CloseMouseClicked

    private void jBtn_CloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtn_CloseMouseEntered
        jBtn_Close.setBackground(Color.red);
    }//GEN-LAST:event_jBtn_CloseMouseEntered

    private void jBtn_CloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtn_CloseMouseExited
        jBtn_Close.setBackground(Color.white);
    }//GEN-LAST:event_jBtn_CloseMouseExited

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Return.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Return().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Edit;
    private javax.swing.JButton ReturnBack;
    private javax.swing.JComboBox<String> carList;
    private javax.swing.JButton close0;
    private javax.swing.JComboBox<String> customerList;
    private javax.swing.JButton delete;
    private javax.swing.JTextField elapsed_hour;
    private javax.swing.JTextField fine;
    private javax.swing.JButton jBtn_Close;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToggleButton show;
    // End of variables declaration//GEN-END:variables
}
